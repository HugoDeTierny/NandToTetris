@256
D=A
@SP
M=D
@Sys.init
0;JMP
(TRUE)
@SP
A=M
M=-1
@SP
M=M+1
@R13
A=M
0;JMP
(FALSE)
@SP
A=M
M=0
@SP
M=M+1
@R13
A=M
0;JMP
//function Main.fibonacci 0
(Main.fibonacci)
@SP
A=M
@0
D=A
@SP
M=D+M
//push argument 0
@0
D=A
@ARG
D=D+M
@R13
M=D
@R13
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@ENDOPERATION:0
D=A
@R13
M=D
@SP
// AM=M-1
AM=M-1
D=M
@SP
AM=M-1
D=M-D
@TRUE
D;JLT
@FALSE
0;JMP
(ENDOPERATION:0)
//if-goto N_LT_2
@SP
AM=M-1
D=M
@Main.fibonacci$N_LT_2
D;JNE
//goto N_GE_2
@Main.fibonacci$N_GE_2
0;JMP
//label N_LT_2
(Main.fibonacci$N_LT_2)
//push argument 0
@0
D=A
@ARG
D=D+M
@R13
M=D
@R13
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//return
// Tmp variable endframe stock LCL
@LCL
D=M
@Main.fibonacci.endframe
M=D
// get and stock the return address *(LCL-5)
@5
A=D-A
D=M
@Main.fibonacci.returnAddress
M=D
// *ARG = pop()
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// SP = ARG + 1
@ARG
D=M+1
@SP
M=D
 // THAT = *(endframe-1)
@Main.fibonacci.endframe
A=M-1
D=M
@THAT
M=D
// THIS = *(endframe-2)
@Main.fibonacci.endframe
A=M-1
A=A-1
D=M
@THIS
M=D
 // ARG = *(endframe-3)
@Main.fibonacci.endframe
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
 // LCL = *(endframe-4)
@Main.fibonacci.endframe
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
// go to returnAddresseName
@Main.fibonacci.returnAddress
A=M
0;JMP
//label N_GE_2
(Main.fibonacci$N_GE_2)
//push argument 0
@0
D=A
@ARG
D=D+M
@R13
M=D
@R13
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//call Main.fibonacci 1
@Main.fibonacci$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.0)
//push argument 0
@0
D=A
@ARG
D=D+M
@R13
M=D
@R13
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
A=M
A=A-1
D=M
A=A-1
M=M-D
@SP
M=M-1
//call Main.fibonacci 1
@Main.fibonacci$ret.1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Main.fibonacci$ret.1)
//add
@SP
A=M
A=A-1
D=M
A=A-1
M=D+M
@SP
M=M-1
//return
// Tmp variable endframe stock LCL
@LCL
D=M
@Main.fibonacci.endframe
M=D
// get and stock the return address *(LCL-5)
@5
A=D-A
D=M
@Main.fibonacci.returnAddress
M=D
// *ARG = pop()
@0
D=A
@ARG
D=D+M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
A=M
M=D
// SP = ARG + 1
@ARG
D=M+1
@SP
M=D
 // THAT = *(endframe-1)
@Main.fibonacci.endframe
A=M-1
D=M
@THAT
M=D
// THIS = *(endframe-2)
@Main.fibonacci.endframe
A=M-1
A=A-1
D=M
@THIS
M=D
 // ARG = *(endframe-3)
@Main.fibonacci.endframe
A=M-1
A=A-1
A=A-1
D=M
@ARG
M=D
 // LCL = *(endframe-4)
@Main.fibonacci.endframe
A=M-1
A=A-1
A=A-1
A=A-1
D=M
@LCL
M=D
// go to returnAddresseName
@Main.fibonacci.returnAddress
A=M
0;JMP
//function Sys.init 0
(Sys.init)
@SP
A=M
@0
D=A
@SP
M=D+M
//push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//call Main.fibonacci 1
@Sys.init$ret.0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
(Sys.init$ret.0)
//label END
(Sys.init$END)
//goto END
@Sys.init$END
0;JMP
(END)
@END
0;JMP
