// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    And(
        a= instruction[15], //Type C
        b= instruction[3], // D3
        out= writeM);

// Mux instruction || Alu output
    Mux16(
        a= instruction, 
        b= outALU,
        sel= instruction[15], // 0xxx => A 1xxx => C
        out= valueA);

// Register A 
    Not(
        in= instruction[15],
        out= typeA);
    And(
        a= instruction[15], //Type C 
        b= instruction[5], //D1
        out= cChangeA);
    Or(
        a= typeA, 
        b= cChangeA, 
        out= loadA);
    ARegister(
        in= valueA,
        load= loadA,
        out= A,
        out[0..14] = addressM);

// Register D
    And(
        a= instruction[15], // Type C
        b= instruction[4], // D2
        out= loadD);

    DRegister(
        in= outALU,
        load= loadD, 
        out= D);


// Mux A || M
    And(
        a= instruction[15], // Type C
        b= instruction[12], // a = 1 => we work with M
        out= FromMemory);
    Mux16(
        a= A, 
        b= inM, 
        sel= FromMemory, 
        out= AorM);

    ALU(
        x= D, // D Registre = x
        y= AorM, // y is A or M depending on instruction
        zx= instruction[11], 
        nx= instruction[10], 
        zy= instruction[9], 
        ny= instruction[8], 
        f= instruction[7],
        no= instruction[6], 
        out = outM,
        out = outALU, 
        zr= zr, 
        ng= ng);
// We look at jump bit if is C command
    Mux16(
        a= false, 
        b[0..2]= instruction[0..2], 
        sel= instruction[15], 
        out[0..2]= CJumpCommand);

    Not(in= zr, out= nzr);
    Not(in= ng, out= pos);

    And(a= nzr, b= pos, out= strictPositiv);
    Or(a= ng, b= zr, out= negativ);
    Mux8Way16(
        // 000 => we never jump
        a[0]= false,
        // 001 => jump si > 0 <=> !zr && !ng
        b[0]= strictPositiv,
        // 010 => jump == 0 > zr
        c[0]= zr,
        // 011 => jump >= 0 => !ng
        d[0]= pos,
        // 100 => jump < 0 => ng && !zr
        e[0]= ng,
        // 101 => jump != 0 => !zr
        f[0]= nzr,
        // 110 => jump <= 0 => ng || zr
        g[0]= negativ,
        // 111 => always jump
        h[0]= true,
        sel= CJumpCommand,
        out[0]= jmp);
    PC(
        in= A,
        load= jmp,
        inc= true,
        reset= reset,
        out[0..14]= pc);
}