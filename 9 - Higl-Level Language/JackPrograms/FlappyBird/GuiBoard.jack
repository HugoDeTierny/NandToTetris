class GuiBoard
{
  field int difficulty;
  field int distance_Between_Wall;
  field Array current_Walls;
  
  constructor GuiBoard new(int diff) {
  	var int i, next_position;
	var Wall wall;
	let current_Walls = Array.new(diff);
	
	let difficulty = diff;
	let i = 0;
	let distance_Between_Wall = Math.divide(512, diff);
	while (i < diff) {
		let next_position = 100 + (i * distance_Between_Wall);
		let wall = Wall.new(next_position, 10);
		let current_Walls[i] =  wall;
		let i = i +1;
	}
	
    return this;
  }

  method void dispose() {
    return;
  }


  method void drawPip(int num) {
   /* var int col_offset;
    var int y_offset;

    let col_offset = 5 * Util.mod(num - 1, 3);
    let y_offset = 78 * ((num - 1) / 3);

    do GuiPip.draw(m_col_offset + col_offset, m_y_offset + y_offset);
*/
    return;
  }

  method void blankPip(int num) {
    /*var int col_offset;
    var int y_offset;

    let col_offset = 5 * Util.mod(num - 1, 3);
    let y_offset = 78 * ((num - 1) / 3);

    do GuiPip.blank(m_col_offset + col_offset, m_y_offset + y_offset);
*/
    return;
  }
  
  method void drawGrid() {
  	var int i;
	let i = 0;
	
	while (i < difficulty) {
		do Screen.drawRectangle(current_Walls[i], 10, current_Walls[i] + 10 , 250); 
		let i = i +1;
	}


    return;
  }
  // Deplace all current wall to simulate advance
  method void move(){
		var int i,j, max;
		var int current_position;
		var Wall current_wall;
		let i = 0;
		let j = -1;
		let max = 0;
		
		while (i < difficulty) {
			
			let current_position = 100; //current_Walls[i].getPosition();
			if(current_position < 10){
				let j = i;
				
			}
			else{
				do (current_Walls[i].move());
				if(current_Walls[i].getPosition() > max){
					let max = current_Walls[i].getPosition();
				}
			}
			let i = i +1;
		}
		if(j > -1){
			let max = max + distance_Between_Wall;
			if(max < 502){
				current_Walls[j].redraw(); 
			}
		}
	return;
	}
}
