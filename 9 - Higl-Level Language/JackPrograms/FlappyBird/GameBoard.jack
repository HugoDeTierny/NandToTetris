class GameBoard {
	static int m_A;
	static int m_M;
	static int m_Q;
	static int m_R;
	
  field int m_state;  // state of the pips, max 0x1ff
  field int m_difficulty;
  field GuiBoard m_guiBoard;
  field Sprit character;
  field int m_rnd_seed;
  field Array m_random_values;

  constructor GameBoard new() {
    
    let m_difficulty = 0;
	let character = Sprit.new();
    return this;
  }

  method void initGameScreen() {
  //var int rnd_value;
  //let rnd_value = Rand();
	let m_guiBoard = GuiBoard.new(m_difficulty);//rnd_value);
    do Screen.clearScreen();
    return;
  }

  method void dispose() {
    do m_random_values.dispose();
    do m_guiBoard.dispose();
    return;
  }

// the loop where the game happen
  method void run() {
	var int i, pressedKey, j, retain_Up_Task, bird_bot, bird_top;
	var boolean moveUp;
	let moveUp = false;
	let retain_Up_Task = 5;
	while (true){
		if(i =1000){
			do Screen.clearScreen();
			
			let bird_bot = character.getBot();
			let bird_top = character.getTop();
			do m_guiBoard.move(bird_bot, bird_top);
			
			let i = 0;
			let j = 800;
		}
		
		if(j = 800) 
		{
			do character.move(moveUp);
			let retain_Up_Task = retain_Up_Task - 1;
			if (retain_Up_Task = 0) {
				let moveUp = false;
			}
			let j = 0;
		}
		let i = i+1;
		let j = j+1;
		let pressedKey = Keyboard.keyPressed();
		if (pressedKey = 131){
			let moveUp = true;
			let pressedKey = 0;
			let retain_Up_Task = 5;
		}
	}
    return;
  }

  // While waiting for the user to enter 1/2/3/4 accumulate how my loop
  // iterations are happening.  Use this with the PRNG seed.
  method void waitForDifficultyChoice() {
    var char ch;
    var int tics;
    var boolean do_wait_loop;
    var int difficulty;

    let tics = 0;
    let do_wait_loop = true;

    while (do_wait_loop = true) {
      let ch = Keyboard.keyPressed();

      // easy (1)
      if (ch = 49) {
        let do_wait_loop = false;
        let difficulty = 1;
      }

      // medium (2)
      if (ch = 50) {
        let do_wait_loop = false;
        let difficulty = 2;
      }

      // hard (3)
      if (ch = 51) {
        let do_wait_loop = false;
        let difficulty = 3;
      }

      // expert (4)
      if (ch = 52) {
        let do_wait_loop = false;
        let difficulty = 4;
      }
	  
	  // expert (5)
      if (ch = 53) {
        let do_wait_loop = false;
        let difficulty = 5;
      }
	  
	        // expert (6)
      if (ch = 54) {
        let do_wait_loop = false;
        let difficulty = 6;
      }

      let tics = tics + 1;
    }

    let m_difficulty = difficulty;

    // Wait for key to be release
    while (~(ch = 0)) {
      let ch = Keyboard.keyPressed();
    }

    do set_random_seed(tics & 32767);

    return;
  }


  method void set_random_seed(int val)
  {
    var int index;
    var int bias;

    let index = Util.mod(val, 40);
    let bias = val;

    let m_rnd_seed = (m_random_values[index] + bias) & 32767;

    return;
  }

  method int rand()
  {
    var int candidate_rnd_seed;

    let candidate_rnd_seed = (m_A * (Util.mod(m_rnd_seed, m_Q))) - (m_R * (m_rnd_seed / m_Q));

    if (candidate_rnd_seed < 0) {
      let m_rnd_seed = candidate_rnd_seed + m_M;
    } else {
      let m_rnd_seed = candidate_rnd_seed;
    }

    return m_rnd_seed;
  }
}
